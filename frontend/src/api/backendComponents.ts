/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useBackendContext, BackendContext } from "./backendContext";
import type * as Fetcher from "./backendFetcher";
import { backendFetch } from "./backendFetcher";
import type * as Schemas from "./backendSchemas";

export type TaskError = Fetcher.ErrorWrapper<undefined>;

export type TaskResponse = Schemas.CtfTask[];

export type TaskVariables = BackendContext["fetcherOptions"];

export const fetchTask = (variables: TaskVariables, signal?: AbortSignal) =>
  backendFetch<TaskResponse, TaskError, undefined, {}, {}, {}>({
    url: "/Api/Task",
    method: "get",
    ...variables,
    signal,
  });

export const useTask = <TData = TaskResponse>(
  variables: TaskVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<TaskResponse, TaskError, TData>,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useBackendContext(options);
  return reactQuery.useQuery<TaskResponse, TaskError, TData>(
    queryKeyFn({ path: "/Api/Task", operationId: "task", variables }),
    ({ signal }) => fetchTask({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation = {
  path: "/Api/Task";
  operationId: "task";
  variables: TaskVariables;
};
